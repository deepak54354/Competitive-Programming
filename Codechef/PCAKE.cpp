#include <bits/stdc++.h>
using namespace std;
#define Pi 3.141592653589793
#define eps 1e-9
#define MOD 1000000007
#define SQR(n) ((n)*(n))
#define MEM(a,val) memset(a,val,sizeof(a))
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector< vector<int> >
#define pii pair<int,int>
#define pb push_back
#define F first
#define S second
#define SS stringstream
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define FOR(i,a,b) for(int i = a; i < b; i++)
#define FORD(i,a,b) for(int i = b; i >= a; i--)
#define ul unsigned long
#define READ freopen("input.txt", "r", stdin);
#define WRITE freopen("output.txt", "w", stdout);
#define fast_io ios_base::sync_with_stdio(false)
#ifdef _WIN32
#  define LLD "%I64d"
#else
#  define LLD "%lld"
#endif
ll mod(ll a, ll b) // calculates a%b, not remainder
{
    ll ans;
    if(b == 0)
        return -1;
    else
    {
        ans = (a<0 ? mod(((a%b)+b),b) : a%b);
    }
    return ans;
}
vii factors(1010);
vector<bool> multiple(1010,0);
vi primes;
bool prime[1020];
void sieve(int N)
{
  for(int i = 0; i < N+1; i++)
    prime[i] = true;
  prime[0]=false;
  prime[1]=false;
  int end = sqrt(N);
  for(int i = 2; i < end; i++)
  {
    if(prime[i])
    {
      	for(int j = i*i; j < N; j += i)
        	prime[j] = false;
    }
  }
  FOR(i,0,1010){
  	if(prime[i]) primes.pb(i);
  }
}

void primeFactors(int N) {
// vi "primes" (generated by sieve) is optional
	int temp =N;
	int PF_idx = 0, PF = primes[PF_idx]; // using PF = 2, 3, 4, ..., is also ok.	
	while (N != 1 && (PF * PF <= N)) { 
		int count=0;
		while (N % PF == 0) { count++;N /= PF; factors[temp].push_back(PF); } // remove this PF
		if(count>1) multiple[temp]=1;
		PF = primes[++PF_idx]; // only consider primes!
	}
	if (N != 1) factors[temp].push_back(N); // special case if N is actually a prime
}
vi v(100010);
void solve(){
    int n;
    cin >>n;
    FOR(i,0,n) cin >> v[i];
    ll ans =0;
    ll l,r;
    l=r=0;
    vector<bool> temp(1010,0);
    //cout << factors[8][0] << endl;
    while(l<n){
        while(r<n){
            if(r<l)r=l;
            if(multiple[v[r]]){
                break;
            }
            else if(v[r]==1){
                r++;
                continue;
            }
            else{
                bool flag = true;
                FOR(i,0,factors[v[r]].size()){
                    if(temp[factors[v[r]][i]]){
                        flag = false;
                        break;
                    }
                }
                if(flag){
                    FOR(i,0,factors[v[r]].size()){
                        temp[factors[v[r]][i]]=1;
                    }
                }
                else{
                    break;
                }
            }
            r++;
        }
        int m = r-l;
        //cout << "l: "<<l << " r: " << r << endl;
        ans+=m;
        FOR(i,0,factors[v[l]].size()){
            temp[factors[v[l]][i]]=0;
        }
        l++;
    }
    cout << ans << endl;
}
int main()
{
    fast_io;
    //ifstream in_file("file.in");
    //ofstream out_file("file.out");
    sieve(1010);
    /*for(auto i: primes){
    	cout << i << endl;
    }*/
    //cout << "ola" << endl;
    FOR(i,2,1010){
    	primeFactors(i);
    	//cout << i << endl;
    	/*for(auto j : factors[i]){
    		cout << j << " ";
    	}
    	cout << endl;*/
    }    
    int t;
    cin >> t;
    while(t--){
        solve();
    }
    return 0;
}